#BlueJ class context
comment0.target=TreeUtil
comment0.text=\n\ TreeUtil\ contains\ the\ following\ methods\ for\ manipulating\ binary\ trees\:\n\ leftmost,\ rightmost,\ maxDepth,\ createRandom,\ count\ nodes,\ count\ leaves,\ \n\ preorder,\ inorder,\ postorder,\ fillList,\ savetree,\ buildtree,\ loadtree\n\ @author\ Vedant\ Yadav\ ...-\ \ .\ \ -..\ \ .-\ \ -.\ \ -\n\ @version\ 12/12/23\n\n
comment1.params=t
comment1.target=java.lang.Object\ leftmost(TreeNode)
comment1.text=\n\ leftmost\ returns\ the\ value\ in\ the\ leftmost\ node\ of\ the\ tree.\ \ It\ is\ \n\ implemented\ iteratively\n\ precondition\:\ \ t\ is\ non-empty\n\ @param\ t\ is\ the\ tree\ whose\ leftmost\ node\ is\ to\ be\ found\n\ @return\ the\ VALUE\ in\ the\ leftmost\ node\ of\ t.\n
comment10.params=t\ list
comment10.target=void\ fillList(TreeNode,\ java.util.List)
comment10.text=\n\ fill\ a\ list\ with\ the\ values\ of\ a\ binary\ tree\ rooted\ at\ t\ using\ a\ \n\ pre-order\ traversal\ with\ '$'\ values\ added\ to\ the\ list\ whenever\n\ a\ null\ pointer\ is\ encountered\n\ @param\ t\ the\ root\ of\ the\ tree\n\ @param\ list\ the\ returned\ list\ of\ values\ in\ the\ tree\n
comment11.params=fileName\ t
comment11.target=void\ saveTree(java.lang.String,\ TreeNode)
comment11.text=\n\ saveTree\ uses\ the\ FileUtil\ utility\ class\ to\ save\ the\ tree\ rooted\ at\ t\n\ as\ a\ file\ with\ the\ given\ file\ name\n\ @param\ fileName\ is\ the\ name\ of\ the\ file\ to\ create\ which\ will\ hold\ the\ data\n\ \ \ \ \ \ \ \ values\ in\ the\ tree\n\ @param\ t\ is\ the\ root\ of\ the\ tree\ to\ save\n
comment12.params=it
comment12.target=TreeNode\ buildTree(java.util.Iterator)
comment12.text=\n\ buildTree\ takes\ in\ an\ iterator\ which\ will\ iterate\ through\ a\ valid\ description\ of\n\ a\ binary\ tree\ with\ String\ values.\ \ Null\ nodes\ are\ indicated\ by\ "$"\ markers\n\ @param\ it\ the\ iterator\ which\ will\ iterate\ over\ the\ tree\ description\n\ @return\ a\ pointer\ to\ the\ root\ of\ the\ tree\ built\ by\ the\ iteration\n
comment13.params=fileName
comment13.target=TreeNode\ loadTree(java.lang.String)
comment13.text=\n\ read\ a\ file\ description\ of\ a\ tree\ and\ then\ build\ the\ tree\n\ @param\ fileName\ is\ a\ valid\ file\ name\ for\ a\ file\ that\ describes\ a\ binary\ tree\n\ @return\ a\ pointer\ to\ the\ root\ of\ the\ tree\n
comment14.params=
comment14.target=java.lang.String\ getUserInput()
comment14.text=\n\ utility\ method\ that\ waits\ for\ a\ user\ to\ type\ text\ into\ Std\ Input\ and\ then\ press\ enter\n\ @return\ the\ string\ entered\ by\ the\ user\n
comment15.params=t\ display
comment15.target=void\ twentyQuestionsRound(TreeNode,\ TreeDisplay)
comment15.text=\n\ plays\ a\ single\ round\ of\ 20\ questions\n\ postcondition\:\ \ plays\ a\ round\ of\ twenty\ questions,\ asking\ the\ user\ questions\ as\ it\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ walks\ down\ the\ given\ knowledge\ tree,\ lighting\ up\ the\ display\ as\ it\ goes;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ modifies\ the\ tree\ to\ include\ information\ learned.\n\ @param\ t\ a\ pointer\ to\ the\ root\ of\ the\ game\ tree\n\ @param\ display\ which\ will\ show\ the\ progress\ of\ the\ game\n
comment16.params=
comment16.target=void\ twentyQuestions()
comment16.text=\ \n\ plays\ a\ game\ of\ 20\ questions\n\ Begins\ by\ reading\ in\ a\ starting\ file\ and\ then\ plays\ multiple\ rounds\n\ until\ the\ user\ enters\ "quit".\ \ Then\ the\ final\ tree\ is\ saved\n
comment17.params=t
comment17.target=TreeNode\ copy(TreeNode)
comment17.text=\n\ copy\ a\ binary\ tree\n\ @param\ t\ the\ root\ of\ the\ tree\ to\ copy\n\ @return\ a\ new\ tree,\ which\ is\ a\ complete\ copy\n\ \ \ \ \ \ \ \ \ of\ t\ with\ all\ new\ TreeNode\ objects\n\ \ \ \ \ \ \ \ \ pointing\ to\ the\ same\ values\ as\ t\ (in\ the\ same\ order,\ shape,\ etc)\n
comment18.params=t1\ t2
comment18.target=boolean\ sameShape(TreeNode,\ TreeNode)
comment18.text=\n\ tests\ to\ see\ if\ two\ trees\ have\ the\ same\ shape,\ but\ not\ necessarily\ the\n\ same\ values.\ \ Two\ trees\ have\ the\ same\ shape\ if\ they\ have\ TreeNode\ objects\n\ in\ the\ same\ locations\ relative\ to\ the\ root\n\ @param\ t1\ pointer\ to\ the\ root\ of\ the\ first\ tree\n\ @param\ t2\ pointer\ to\ the\ root\ of\ the\ second\ tree\n\ @return\ true\ if\ t1\ and\ t2\ describe\ trees\ having\ the\ same\ shape,\ false\ otherwise\n
comment19.params=display
comment19.target=TreeNode\ createDecodingTree(TreeDisplay)
comment19.text=\n\ Generate\ a\ tree\ for\ decoding\ Morse\ code\n\ @param\ display\ the\ display\ that\ will\ show\ the\ decoding\ tree\n\ @return\ the\ decoding\ tree\n
comment2.params=t
comment2.target=java.lang.Object\ rightmost(TreeNode)
comment2.text=\n\ rightmost\ returns\ the\ value\ in\ the\ rightmost\ node\ of\ the\ tree.\ \ It\ is\ \n\ implemented\ recursively\n\ precondition\:\ \ t\ is\ non-empty\n\ @param\ t\ is\ the\ tree\ whose\ rightmost\ node\ is\ to\ be\ found\n\ @return\ the\ VALUE\ in\ the\ rightmost\ node\ of\ t.\n
comment20.params=decodingTree\ letter\ code\ display
comment20.target=void\ insertMorse(TreeNode,\ java.lang.String,\ java.lang.String,\ TreeDisplay)
comment20.text=\n\ helper\ method\ for\ building\ a\ Morse\ code\ decoding\ tree.\n\ postcondition\:\ \ inserts\ the\ given\ letter\ into\ the\ decodingTree,\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ in\ the\ appropriate\ position,\ as\ determined\ by\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ given\ Morse\ code\ sequence;\ lights\ up\ the\ display\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ as\ it\ walks\ down\ the\ tree\n\ @param\ decodingTree\ is\ the\ partial\ decoding\ tree\n\ @param\ letter\ is\ the\ letter\ to\ add\n\ @param\ code\ is\ the\ Morse\ code\ for\ letter\n\ @param\ display\ is\ the\ display\ that\ will\ show\ progress\ as\ the\ method\ walks\ \n\ \ \ \ \ \ \ \ down\ the\ tree\n
comment21.params=decodingTree\ cipherText\ display
comment21.target=java.lang.String\ decodeMorse(TreeNode,\ java.lang.String,\ TreeDisplay)
comment21.text=\n\ decodes\ Morse\ code\ by\ walking\ the\ decoding\ tree\ according\ to\ the\ input\ code\n\ @param\ decodingTree\ is\ the\ Morse\ code\ decoding\ tree\n\ @param\ cipherText\ is\ Morse\ code\ consisting\ of\ dots,\ dashes,\ and\ spaces\n\ @param\ display\ is\ the\ display\ object\ that\ will\ show\ the\ decoding\ progress\n\ @return\ the\ string\ represented\ by\ cipherText\n
comment3.params=t
comment3.target=int\ maxDepth(TreeNode)
comment3.text=\n\ ...-\ \ .\ \ -..\ \ .-\ \ -.\ \ -\ maxDepth\ calculates\ the\ maximum\ depth\ of\ a\ binary\ tree.\ \ An\ empty\ tree\ has\ \n\ depth\ of\ 0\ and\ a\ tree\ with\ one\ node\ has\ a\ depth\ of\ 1\n\ @param\ t\ a\ pointer\ to\ the\ root\ of\ a\ tree\ whose\ depth\ is\ to\ be\ calculated\n\ @return\ the\ depth\ of\ the\ tree\ rooted\ at\ t\n
comment4.params=depth
comment4.target=TreeNode\ createRandom(int)
comment4.text=\n\ Creates\ a\ random\ tree\ of\ the\ specified\ depth.\ \ \n\ @param\ depth\ of\ the\ tree\n\ @return\ TreeNode\ object\ that\ points\ to\ the\ generated\ tree\n
comment5.params=t
comment5.target=int\ countNodes(TreeNode)
comment5.text=\n\ counts\ the\ number\ of\ nodes\ that\ are\ in\ the\ tree\ rooted\ at\ t\n\ @param\ t\ the\ root\ of\ the\ tree\n\ @return\ the\ number\ of\ nodes\ in\ the\ tree\ rooted\ at\ t\n
comment6.params=t
comment6.target=int\ countLeaves(TreeNode)
comment6.text=\n\ counts\ the\ number\ of\ leaves\ in\ the\ tree\ t\n\ @param\ t\ the\ root\ of\ the\ binary\ tree\n\ @return\ the\ number\ of\ leaves\ in\ the\ tree\n
comment7.params=t\ display
comment7.target=void\ preOrder(TreeNode,\ TreeDisplay)
comment7.text=\n\ perform\ a\ pre-order\ traversal\ of\ the\ binary\ tree\ rooted\ at\ t,\ lighting\n\ up\ the\ nodes\ on\ the\ display\ as\ the\ traversal\ takes\ place\n\ @param\ t\ the\ root\ of\ the\ tree\ to\ traverse\n\ @param\ display\ the\ display\ that\ will\ show\ the\ traversal\n\ postcondition\:\ each\ node\ in\ t\ has\ been\ lit\ up\ on\ display\n
comment8.params=t\ display
comment8.target=void\ inOrder(TreeNode,\ TreeDisplay)
comment8.text=\n\ perform\ an\ in-order\ traversal\ of\ the\ binary\ tree\ rooted\ at\ t,\ lighting\n\ up\ the\ nodes\ on\ the\ display\ as\ the\ traversal\ takes\ place\n\ @param\ t\ the\ root\ of\ the\ tree\ to\ traverse\n\ @param\ display\ the\ display\ that\ will\ show\ the\ traversal\n\ postcondition\:\ each\ node\ in\ t\ has\ been\ lit\ up\ on\ display\n
comment9.params=t\ display
comment9.target=void\ postOrder(TreeNode,\ TreeDisplay)
comment9.text=\n\ perform\ a\ post-order\ traversal\ of\ the\ binary\ tree\ rooted\ at\ t,\ lighting\n\ up\ the\ nodes\ on\ the\ display\ as\ the\ traversal\ takes\ place\n\ @param\ t\ the\ root\ of\ the\ tree\ to\ traverse\n\ @param\ display\ the\ display\ that\ will\ show\ the\ traversal\n\ postcondition\:\ each\ node\ in\ t\ has\ been\ lit\ up\ on\ display\n
numComments=22
